# YAML config file

##################################
#########Default profiles#########
##################################

hv_kumar:
  # Id inforamtion
  exp_id: '1.0' #
  mode: 'hover' # Net type
  model_type: 'np_hv' # Net subtype

  ### Data preparaion (if needed)
  extract_data_dir: '/data/input/data_kumar/'
  extract_type: 'mirror' # 'valid' for fcn8 segnet etc.
                            # 'mirror' for u-net etc.
  # check the patch_extractor.py 'main' to see the different
  img_ext: '.tif'
  data_modes:
    - 'train'
    - 'test_diff'
    - 'test_same'
  # orignal size (win size) - input size - output size (step size)
  # 512x512 - 256x256 - 256x256 fcn8, dcan, segnet
  # 536x536 - 268x268 - 84x84   unet, dist
  # 540x540 - 270x270 - 80x80   xy, hover
  # 504x504 - 252x252 - 252x252 micronet
  step_size: [80, 80] # should match self.train_mask_shape (config.py)
  win_size: [540, 540] # should be at least twice time larger than
                         # self.train_base_shape (config.py) to reduce
                         # the padding effect during augmentation

  ### Network parameters
  seed: 10
  type_classification: False # whether to predict the nuclear type, ! must use CoNSeP dataset, where nuclear type labels are available
  nr_types: 5  # Denotes number of classes for nuclear type classification
  # Some semantic segmentation network like micronet, nr_types will replace nr_classes if type_classification=True
  nr_classes: 2 # Nuclei Pixels vs Background

  ### Train parameters
  data_ext: '.npy' # Data extension
  # List of directories containing validation patches
  train_dir:
    - '/data/output/extract/hv_kumar_540x540_80x80/train/Labels/'
  valid_dir:
    - '/data/output/extract/hv_kumar_540x540_80x80/test_diff/Labels/'
    - '/data/output/extract/hv_kumar_540x540_80x80/test_same/Labels/'
  # Number of processes for parallel processing input
  nr_procs_train: 8
  nr_procs_valid: 4
  input_norm: True # normalize RGB to 0-1 range

  ### Inference parameters
  inf_auto_find_chkpt: False # Use that only if you've trained from scratch and have <stats.json> file
  inf_model_path: '/data/input/weights_hv_kumar.npz' # Path to weights
      # output will have channel ordering as [Nuclei Type][Nuclei Pixels][Additional]
      # where [Nuclei Type] will be used for getting the type of each instance
      # while [Nuclei Pixels]self.out_extract_root = os.path.join(self.log_path, 'extract')[Additional] will be used for extracting instances

  inf_imgs_ext: '.tif' # Data extension of inference data

  # root_dir, output_dirname, subdir1, subdir2[optional] ...
  inf_data_list:
    - - '/data/input/data_kumar'  # root_dir
      - 'mat'                     # output_dirname
      - 'test_diff/Images'        # subdir1
      - 'test_same/Images'        # subdir2[optional]

  # For inference during evalutaion mode i.e run by inferer.py
  eval_inf_input_tensor_names:
    - 'images'
  eval_inf_output_tensor_names:
    - 'predmap-coded'

  # For inference during training mode i.e run by trainer.py
  train_inf_output_tensor_names:
    - 'predmap-coded'
    - 'truemap-coded'

##################################

hv_cmp17:
  # Id inforamtion
  exp_id: '1.0'
  mode: 'hover'
  model_type: 'np_hv'

  ### Data preparaion (if needed)
  extract_data_dir: '/data/input/data_cpm17/'
  extract_type: 'mirror'
  img_ext: '.png'
  data_modes:
    - 'train'
    - 'test'
  step_size: [80, 80]
  win_size: [540, 540]

  ### Network parameters
  seed: 10
  type_classification: False
  nr_types: 5
  nr_classes: 2

  ### Train parameters
  data_ext: '.npy'
  train_dir:
    - '/data/output/extract/hv_cmp17_540x540_80x80/train/Labels/'
  valid_dir:
    - '/data/output/extract/hv_cmp17_540x540_80x80/test/Labels/'
  nr_procs_train: 8
  nr_procs_valid: 4
  input_norm: True

  ### Inference parameters
  inf_auto_find_chkpt: False
  inf_model_path: '/data/input/weights_hv_CPM17.npz'
  inf_imgs_ext: '.png'
  inf_data_list:
    - - '/data/input/data_cpm17'
      - 'mat'
      - 'test/Images'

  eval_inf_input_tensor_names:
    - 'images'
  eval_inf_output_tensor_names:
    - 'predmap-coded'

  train_inf_output_tensor_names:
    - 'predmap-coded'
    - 'truemap-coded'

##################################

hv_seg_consep:
  # Id inforamtion
  exp_id: '1.0'
  mode: 'hover'
  model_type: 'np_hv'

  ### Data preparaion (if needed)
  extract_data_dir: '/data/input/data_consep/'
  extract_type: 'mirror' # 'valid' for fcn8 segnet etc.
                            # 'mirror' for u-net etc.
  # check the patch_extractor.py 'main' to see the different
  img_ext: '.png'
  data_modes:
    - 'train'
    - 'test'
  step_size: [80, 80]
  win_size: [540, 540]

  ### Network parameters
  seed: 10
  type_classification: False # TODO FIX: True for data prep
  nr_types: 5
  nr_classes: 2

  ### Train parameters
  data_ext: '.npy'
  train_dir:
    - '/data/output/extract/hv_seg_consep_540x540_80x80/train/Labels/'
  valid_dir:
    - '/data/output/extract/hv_seg_consep_540x540_80x80/test/Labels/'
  nr_procs_train: 8
  nr_procs_valid: 4
  input_norm: True

  ### Inference parameters
  inf_auto_find_chkpt: False
  inf_model_path: '/data/input/weights_hv_seg_CoNSeP.npz'
  inf_imgs_ext: '.png'
  inf_data_list:
    - - '/data/input/data_consep'
      - 'mat'
      - 'test/Images'

  eval_inf_input_tensor_names:
    - 'images'
  eval_inf_output_tensor_names:
    - 'predmap-coded'

  train_inf_output_tensor_names:
    - 'predmap-coded'
    - 'truemap-coded'

##################################

hv_seg_cl_consep:  # Id inforamtion
  exp_id: '1.0'
  mode: 'hover'
  model_type: 'np_hv'

  ### Data preparaion (if needed)
  extract_data_dir: '/data/input/data_consep/'
  extract_type: 'mirror' # 'valid' for fcn8 segnet etc.
                            # 'mirror' for u-net etc.
  # check the patch_extractor.py 'main' to see the different
  img_ext: '.png'
  data_modes:
    - 'train'
    - 'test'
  step_size: [80, 80]
  win_size: [540, 540]

  ### Network parameters
  seed: 10
  type_classification: True
  nr_types: 5
  nr_classes: 2

  ### Train parameters
  data_ext: '.npy'
  train_dir:
    - '/data/output/extract/hv_seg_consep_540x540_80x80/train/Labels/'
  valid_dir:
    - '/data/output/extract/hv_seg_consep_540x540_80x80/test/Labels/'
  nr_procs_train: 8
  nr_procs_valid: 4
  input_norm: True

  ### Inference parameters
  inf_auto_find_chkpt: False
  inf_model_path: '/data/input/weights_hv_seg_class_CoNSeP.npz'
  inf_imgs_ext: '.png'
  inf_data_list:
    - - '/data/input/data_consep'
      - 'mat'
      - 'test/Images'

  eval_inf_input_tensor_names:
    - 'images'
  eval_inf_output_tensor_names:
    - 'predmap-coded'

  train_inf_output_tensor_names:
    - 'predmap-coded'
    - 'truemap-coded'

###################################
#### Custom profiles and mixes ####
###################################

hv_consep_seg_uit:
  # Id inforamtion
  exp_id: '1.0'
  mode: 'hover'
  model_type: 'np_hv'

  ### Data preparaion (if needed)
  extract_data_dir: '/data/input/data_consep/'
  extract_type: 'mirror' # 'valid' for fcn8 segnet etc.
                            # 'mirror' for u-net etc.
  # check the patch_extractor.py 'main' to see the different
  img_ext: '.png'
  data_modes:
    - 'train'
    - 'test'
  step_size: [80, 80]
  win_size: [540, 540]

  ### Network parameters
  seed: 10
  type_classification: False
  nr_types: 5
  nr_classes: 2

  ### Train parameters
  data_ext: '.npy'
  train_dir:
    - '/data/output/extract/hv_seg_consep_540x540_80x80/train/Labels/'
  valid_dir:
    - '/data/output/extract/hv_seg_consep_540x540_80x80/test/Labels/'
  nr_procs_train: 8
  nr_procs_valid: 4
  input_norm: True

  ### Inference parameters
  inf_auto_find_chkpt: False
  inf_model_path: '/data/input/weights_hv_seg_CoNSeP.npz'
  inf_imgs_ext: '.tif'
  inf_data_list:
    - - '/data/input/data_uit_he'
      - 'mat'
      - 'test/Images'

  eval_inf_input_tensor_names:
    - 'images'
  eval_inf_output_tensor_names:
    - 'predmap-coded'

  train_inf_output_tensor_names:
    - 'predmap-coded'
    - 'truemap-coded'

######################################

hv_consep_seg_class_uit:
  # Id inforamtion
  exp_id: '1.0'
  mode: 'hover'
  model_type: 'np_hv'

  ### Data preparaion (if needed)
  extract_data_dir: '/data/input/data_consep/'
  extract_type: 'mirror' # 'valid' for fcn8 segnet etc.
                            # 'mirror' for u-net etc.
  # check the patch_extractor.py 'main' to see the different
  img_ext: '.png'
  data_modes:
    - 'train'
    - 'test'
  step_size: [80, 80]
  win_size: [540, 540]

  ### Network parameters
  seed: 10
  type_classification: True
  nr_types: 5
  nr_classes: 2

  ### Train parameters
  data_ext: '.npy'
  train_dir:
    - '/data/output/extract/hv_seg_consep_540x540_80x80/train/Labels/'
  valid_dir:
    - '/data/output/extract/hv_seg_consep_540x540_80x80/test/Labels/'
  nr_procs_train: 8
  nr_procs_valid: 4
  input_norm: True

  ### Inference parameters
  inf_auto_find_chkpt: False
  inf_model_path: '/data/input/weights_hv_seg_class_CoNSeP.npz'
  inf_imgs_ext: '.tif'
  inf_data_list:
    - - '/data/input/data_uit_he'
      - 'mat'
      - 'test/Images'

  eval_inf_input_tensor_names:
    - 'images'
  eval_inf_output_tensor_names:
    - 'predmap-coded'

  train_inf_output_tensor_names:
    - 'predmap-coded'
    - 'truemap-coded'

######################################

1_valid_fw_hv_kumar:
  # test using downloaded weights and kumar dataset

  # Id inforamtion
  exp_id: '1.0'
  mode: 'hover'
  model_type: 'np_hv'

  ### Data preparaion (if needed)
  extract_data_dir: '/data/input/data_kumar/'
  extract_type: 'mirror'
  img_ext: '.tif'
  data_modes:
    - 'train'
    - 'test_diff'
    - 'test_same'
  step_size: [80, 80]
  win_size: [540, 540]

  ### Network parameters
  seed: 10
  type_classification: False
  nr_types: 5
  nr_classes: 2

  ### Train parameters
  data_ext: '.npy'
  train_dir:
    - '/data/output/extract/hv_kumar_540x540_80x80/train/Labels/'
  valid_dir:
    - '/data/output/extract/hv_kumar_540x540_80x80/test_diff/Labels/'
    - '/data/output/extract/hv_kumar_540x540_80x80/test_same/Labels/'
  nr_procs_train: 8
  nr_procs_valid: 4
  input_norm: True # normalize RGB to 0-1 range

  ### Inference parameters
  inf_auto_find_chkpt: False
  inf_model_path: '/data/input/weights_hv_kumar.npz'

  inf_imgs_ext: '.tif'

  inf_data_list:
    - - '/data/input/data_kumar'
      - 'mat'
      - 'test_diff/Images'
      - 'test_same/Images'

  eval_inf_input_tensor_names:
    - 'images'
  eval_inf_output_tensor_names:
    - 'predmap-coded'

  train_inf_output_tensor_names:
    - 'predmap-coded'
    - 'truemap-coded'

##################################

2_valid_mw_hv_kumar:
  # test with my trained weights and kumar dataset

  # Id inforamtion
  exp_id: '1.0'
  mode: 'hover'
  model_type: 'np_hv'

  ### Data preparaion (if needed)
  extract_data_dir: '/data/input/data_kumar/'
  extract_type: 'mirror'

  img_ext: '.tif'
  data_modes:
    - 'train'
    - 'test_diff'
    - 'test_same'
  step_size: [80, 80]
  win_size: [540, 540]

  ### Network parameters
  seed: 10
  type_classification: False
  nr_types: 5
  nr_classes: 2

  ### Train parameters
  data_ext: '.npy'
  train_dir:
    - '/data/output/extract/hv_kumar_540x540_80x80/train/Labels/'
  valid_dir:
    - '/data/output/extract/hv_kumar_540x540_80x80/test_diff/Labels/'
    - '/data/output/extract/hv_kumar_540x540_80x80/test_same/Labels/'
  nr_procs_train: 8
  nr_procs_valid: 4
  input_norm: True

  ### Inference parameters
  inf_auto_find_chkpt: True
  inf_model_path: '/data/output/train/hv_kumar-np_hv-1.0/1/'
  inf_imgs_ext: '.tif'

  inf_data_list:
    - - '/data/input/data_kumar'
      - 'mat'
      - 'test_diff/Images'
      - 'test_same/Images'

  eval_inf_input_tensor_names:
    - 'images'
  eval_inf_output_tensor_names:
    - 'predmap-coded'

  train_inf_output_tensor_names:
    - 'predmap-coded'
    - 'truemap-coded'
